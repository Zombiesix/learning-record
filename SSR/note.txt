Server Side Render

学习路径：（一） -> （二） -> （三四） -> （五六）

注意：
1. 没有在项目中引入的库需要全局安装；
2. 使用中 vue 和 vue-server-renderer 有版本兼容问题；
3. asyncData 在异步的使用需要使用

一、介绍-了解：https://www.jianshu.com/p/b8cfa496b7ec
总结：项目渲染方式分三种：
1. 完全的客户端渲染，单页面应用首屏时获取所有的 JS 文件；
2. 完全的服务器端渲染，代码全部放在服务器上，任何一个用户行为都会发送服务获取新的 html 页面，整个页面重新渲染；
3. 客户端 + 服务器端渲染，服务器端负责首屏（非首页，时首次进入网站的页面）渲染，客户端激活（除首屏外都使用单页面路由方式）；

二、首次尝试实例：
learning-record\SSR\example\ssr\simple-ssr.js

三、vue 项目中实例：（第 3 点的实现方式）
learning-record\SSR\example\ssr\ssr.js
learning-record\SSR\example\vue-ssr
  总入口：app.js
  服务端入口：server entry
  客户端入口：client entry
  webpack 分别打包 ==> server bundle（服务器端使用）、client bundle（客户端使用）
  总结：使用 webpack 对 entry-client、entry-server 进行打包；启动 ssr.js 服务，会获取到首屏页面（包含首屏中所有的 DOM），html 中
  还引入了样式文件、客户端打包的 js 文件（放在 html 最后面用于客户端激活，但不影响首屏页面的渲染 - defer）

四、添加 store 状态管理
类似 vueRouter 直接引入（有些问题需要注意）

思考：以上的实现调试太麻烦了，需要将客户端、服务端代码都进行打包，然后启动服务（可以使用 nodemon 热更新）才可以查看效果
？？？如何解决

五、nuxt 框架（前面 vue-ssr 项目的升级版，实现原理类似）

问题：全局安装 create-nuxt-app 脚手架，使用脚手架 npx create-nuxt-app nuxt 安装项目；此时报错 -->
npm ERR! Could not install from "Files\nodejs\npm_cache\_npx\42372" as it does not contain a package.json file.
解决：npm 配置的 cache 路径中有空格，设置 npm config set cache "D:\Program~1\nodejs\npm_cache" 解决

类似 vue-cli；
技术栈：create-nuxt-app(3.7.x)、nuxt(2.15.x)、vue/core-js(3.15.x)、koa-router(10.0.x)、koa...
项目同时编译 client、server；
路由、全局组件定义... 只要文件放在规定位置会自动完成配置和定义；
项目自定义功能配置地方：nuxt.config.js
在组件中通过 head() 方法自定义设置网站标签名称、字体图标；

六、nuxt 知识点
路由组件编写，嵌套路由，路由传参，路由入口标签，路由链接...
服务代理：只有首屏进行了服务器端渲染，其它页面都是跨域请求，所以开发环境下需要设置代理；
页面的所有请求最好放在 asyncData 函数里面，这个函数是 Nuxt 框架独有的，专门为了 SEO 设计;
/(.*)：匹配所有路径
中间件：权限校验 auth；

问题：create-nuxt-app 不同版本的脚手架创建的项目目录结构差不很大，类似 vueCli2 与vueCli3；

七、打包、发布
